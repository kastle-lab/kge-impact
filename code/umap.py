# -*- coding: utf-8 -*-
"""umap.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1227-EDkLAuljyJhW3POd1_8hwLeB-8RJ
"""

!pip install numpy

!pip install umap

!pip install matplotlib

import numpy as np

from google.colab import drive

# Mount Google Drive
drive.mount('/content/drive', force_remount=True)



import umap
import matplotlib.pyplot as plt



!pip install umap-learn





!pip install umap-learn
!pip install numpy
!pip install matplotlib

import numpy as np
import umap
import matplotlib.pyplot as plt

# Load entity and relation embeddings
entity_embedding_path = '/content/drive/My Drive/KGE/TransE_l2_output-6b_0/output-6b_TransE_l2_entity.npy'
relation_embedding_path = '/content/drive/My Drive/KGE/TransE_l2_output-6b_0/output-6b_TransE_l2_relation.npy'

# Load the embeddings
entity_embeddings = np.load(entity_embedding_path)
relation_embeddings = np.load(relation_embedding_path)

# Apply UMAP dimensionality reduction to 2D
umap_model = umap.UMAP(n_components=2, random_state=42)
entity_embeddings_2d_umap = umap_model.fit_transform(entity_embeddings)

# Create a colormap based on embedding clusters or distances
# Normalize to adjust for large scale embeddings (optional)
norm = plt.Normalize(vmin=np.min(entity_embeddings_2d_umap), vmax=np.max(entity_embeddings_2d_umap))

# Plot the UMAP visualization with colors
plt.figure(figsize=(10, 8))
sc = plt.scatter(entity_embeddings_2d_umap[:, 0], entity_embeddings_2d_umap[:, 1],
                 c=entity_embeddings_2d_umap[:, 0], cmap='Spectral',
                 alpha=0.75, s=10, edgecolor='k', norm=norm)

# Add a color bar to visualize the distribution
plt.colorbar(sc, label='Embedding Value')

# Titles and labels for better readability
plt.title('UMAP Visualization of TransE Entity Embeddings', fontsize=14)
plt.xlabel('UMAP Dim 1', fontsize=12)
plt.ylabel('UMAP Dim 2', fontsize=12)

# Save the plot
output_path = '/content/drive/My Drive/KGE/SKGs/umap_visualization-shallow_colored-6b.png'
plt.savefig(output_path, format='png', dpi=300)

# Show the plot (optional)
plt.show()