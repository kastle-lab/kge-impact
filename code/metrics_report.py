# -*- coding: utf-8 -*-
"""metrics-report.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p2dLK6C5t9Nqq2zv8crxkRb33lH4Lgzu
"""

import os
import csv
import re

directory_path ='/content/drive/My Drive/KGE/out-files'

import os
import re
import csv

# Function to parse a .out file and extract required metrics
def parse_out_file(file_path):
    data = {
        "dataset": "",
        "total_facts": 0,
        "num_nodes": 0,
        "num_edges": 0,
        "edge_to_node_ratio": 0,
        "degree_centrality": [],
        "betweenness_centrality": [],
        "closeness_centrality": []
    }

    with open(file_path, 'r') as file:
        for line in file:

            if line.strip() and not any(keyword in line for keyword in [
                "Total Number of Facts:", "Number of nodes:", "Number of edges:", "Ratio edges to nodes:",
                "Degree Centrality", "Betweenness Centrality", "Closeness Centrality"]):
                data["dataset"] = line.strip()

            # Extract total number of facts
            if "Total Number of Facts:" in line:
                data["total_facts"] = int(re.search(r'\d+', line).group())

            # Extract number of nodes
            if "Number of nodes:" in line:
                data["num_nodes"] = int(re.search(r'\d+', line).group())

            # Extract number of edges
            if "Number of edges:" in line:
                data["num_edges"] = int(re.search(r'\d+', line).group())

            # Extract ratio of edges to nodes
            if "Ratio edges to nodes:" in line:
                data["edge_to_node_ratio"] = float(re.search(r'\d+\.\d+', line).group())

            # Extract degree centrality
            if "Degree Centrality =" in line:
                value = float(line.split('=')[1].strip())
                data["degree_centrality"].append(value)

            # Extract betweenness centrality
            if "Betweenness Centrality =" in line:
                value = float(line.split('=')[1].strip())
                data["betweenness_centrality"].append(value)

            # Extract closeness centrality
            if "Closeness Centrality =" in line:
                value = float(line.split('=')[1].strip())
                data["closeness_centrality"].append(value)

    # Calculate statistics for centralities
    result = {
        "dataset": data["dataset"],
        "total_facts": data["total_facts"],
        "num_nodes": data["num_nodes"],
        "num_edges": data["num_edges"],
        "edge_to_node_ratio": data["edge_to_node_ratio"]
    }

    for metric in ["degree_centrality", "betweenness_centrality", "closeness_centrality"]:
        if data[metric]:
            result[f"{metric}_min"] = min(data[metric])
            result[f"{metric}_max"] = max(data[metric])
            result[f"{metric}_avg"] = sum(data[metric]) / len(data[metric])
        else:
            result[f"{metric}_min"] = result[f"{metric}_max"] = result[f"{metric}_avg"] = None

    return result

# Create a CSV file to store the results
directory_path = '/content/drive/My Drive/KGE/out-files'
output_csv_path = '/content/drive/My Drive/KGE/out-files/SKGS-new.csv'

with open(output_csv_path, mode='w', newline='') as csv_file:
    fieldnames = [
        "dataset", "total_facts", "num_nodes", "num_edges", "edge_to_node_ratio",
        "degree_centrality_min", "degree_centrality_max", "degree_centrality_avg",
        "betweenness_centrality_min", "betweenness_centrality_max", "betweenness_centrality_avg",
        "closeness_centrality_min", "closeness_centrality_max", "closeness_centrality_avg"
    ]
    writer = csv.DictWriter(csv_file, fieldnames=fieldnames)
    writer.writeheader()


    for filename in os.listdir(directory_path):
        if filename in ["output-5rb-metrics.out","output-5rsb-metrics.out","output-5rscb-metrics.out","output-5b-metrics.out","output-6b-metrics.out","output-4b-metrics.out"]:
            file_path = os.path.join(directory_path, filename)
            metrics = parse_out_file(file_path)
            writer.writerow(metrics)

print(f"Metrics successfully written to {output_csv_path}")