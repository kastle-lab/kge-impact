# -*- coding: utf-8 -*-
"""create-SKG-237.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/175cjJfHAqHTcq3Seg1qKZ_vJWN9fdIVr
"""

import random
import os

import random
import os

def parse_centrality(file_path):
    """Parse degree centrality from the .out file."""
    centralities = {}
    with open(file_path, 'r') as file:
        for line in file:
            node, _, centrality = line.partition(": Degree Centrality = ")
            centralities[node.strip()] = float(centrality.strip())
    return centralities

def generate_triples(num_triples=310114, num_relationships=237, num_entities=14541, centrality_constraints=None):
    """Generate random triples for a knowledge graph with centrality constraints."""
    triples = set()
    centrality_constraints = centrality_constraints or {}

    # Generate unique relationship identifiers
    relationships = [f"/pred/{i+1}" for i in range(num_relationships)]

    # Generate unique entity identifiers
    entities = [f"/entity/{i+1}" for i in range(num_entities)]
    constrained_nodes = list(centrality_constraints.keys())

    # Apply centrality constraints to specific nodes
    for node in constrained_nodes:
        num_connections = int(centrality_constraints[node] * num_entities)
        for _ in range(num_connections):
            subject = node
            relationship = random.choice(relationships)
            object_entity = random.choice([e for e in entities if e != node])
            triples.add((subject, relationship, object_entity))

    # Fill remaining triples randomly to reach target number
    while len(triples) < num_triples:
        subject = random.choice(entities)
        relationship = random.choice(relationships)
        object_entity = random.choice([e for e in entities if e != subject])
        triples.add((subject, relationship, object_entity))

    return list(triples)

def split_triples(triples, train_ratio=0.7, valid_ratio=0.2):
    """Split the triples into train, validation, and test sets."""
    if train_ratio + valid_ratio >= 1.0:
        raise ValueError("The sum of train_ratio and valid_ratio must be less than 1.0 for test set.")

    random.shuffle(triples)

    train_size = int(len(triples) * train_ratio)
    valid_size = int(len(triples) * valid_ratio)

    train_triples = triples[:train_size]
    valid_triples = triples[train_size:train_size + valid_size]
    test_triples = triples[train_size + valid_size:]

    return train_triples, valid_triples, test_triples

def save_to_file(triples, filename):
    """Save the triples to a text file."""
    with open(filename, 'w') as f:
        for triple in triples:
            f.write(f"{triple[0]} {triple[1]} {triple[2]}\n")

def main(centrality_file):
    num_triples = 310116
    num_relationships = 237
    num_entities = 14541

    # Parse degree centralities from file
    centralities = parse_centrality(centrality_file)

    # Generate triples with centrality constraints
    triples = generate_triples(num_triples, num_relationships, num_entities, centrality_constraints=centralities)

    # Split into train, validation, and test sets
    train_triples, valid_triples, test_triples = split_triples(triples)

    # Create directory to save files
    output_dir = "create-237-1"
    os.makedirs(output_dir, exist_ok=True)


    save_to_file(train_triples, os.path.join(output_dir, 'train.tsv'))
    save_to_file(valid_triples, os.path.join(output_dir, 'valid.tsv'))
    save_to_file(test_triples, os.path.join(output_dir, 'test.tsv'))

    print(f"Knowledge graph with {num_triples} triples, {num_entities} entities, and {num_relationships} relationships generated and saved.")

if __name__ == "__main__":
    centrality_file = "/content/drive/My Drive/KGE/fb15k-237-deg-centrality.out"
    main(centrality_file)

def generate_triples(num_triples=310116, num_relationships=237, num_entities=14541):
    """Generate random triples for a knowledge graph with specific constraints."""
    triples = set()  # Use a set to store triples, ensuring uniqueness

    # Generate unique relationship identifiers
    relationships = [f"/pred/{i+1}" for i in range(num_relationships)]

    # Generate unique entity identifiers
    entities = [f"/entity/{i+1}" for i in range(num_entities)]

    while len(triples) < num_triples:  # Generate triples until the desired number is reached
        subject = random.choice(entities)  # Random subject entity
        relationship = random.choice(relationships)  # Random relationship
        object_entity = random.choice(entities)  # Random object entity
        triples.add((subject, relationship, object_entity))  # Add to set

    return list(triples)  # Convert back to a list for further processing


def split_triples(triples, train_ratio=0.7, valid_ratio=0.2):
    """Split the triples into train, validation, and test sets."""
    if train_ratio + valid_ratio >= 1.0:
        raise ValueError("The sum of train_ratio and valid_ratio must be less than 1.0 for test set.")

    random.shuffle(triples)  # Shuffle the triples

    train_size = int(len(triples) * train_ratio)
    valid_size = int(len(triples) * valid_ratio)

    train_triples = triples[:train_size]
    valid_triples = triples[train_size:train_size + valid_size]
    test_triples = triples[train_size + valid_size:]

    # Assert no overlap
    assert not set(train_triples) & set(valid_triples), "Training and validation sets overlap!"
    assert not set(train_triples) & set(test_triples), "Training and test sets overlap!"
    assert not set(valid_triples) & set(test_triples), "Validation and test sets overlap!"

    return train_triples, valid_triples, test_triples

def save_to_file(triples, filename):
    """Save the triples to a text file."""
    with open(filename, 'w') as f:
        for triple in triples:
            f.write(f"{triple[0]} {triple[1]} {triple[2]}\n")

def main():
    num_triples = 310114  # Total number of triples
    num_relationships = 237  # Number of relationships
    num_entities = 14541  # Number of distinct entities

    # Generate triples
    triples = generate_triples(num_triples, num_relationships, num_entities)

    # Split into train, validation, and test sets
    train_triples, valid_triples, test_triples = split_triples(triples)


    output_dir = "create-237"
    os.makedirs(output_dir, exist_ok=True)


    save_to_file(train_triples, os.path.join(output_dir, 'train.tsv'))
    save_to_file(valid_triples, os.path.join(output_dir, 'valid.tsv'))
    save_to_file(test_triples, os.path.join(output_dir, 'test.tsv'))

    print(f"Knowledge graph with {num_triples} triples, {num_entities} entities, and {num_relationships} relationships generated and saved.")

if __name__ == "__main__":
    main()



















