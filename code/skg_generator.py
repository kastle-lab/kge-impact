# -*- coding: utf-8 -*-
"""skg-generator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1D4-VKjwAGnwy246iSlRs0KYUAFPCHzEJ
"""

!pip install rdflib

import rdflib
from rdflib import URIRef, Graph, Namespace, Literal
from rdflib import OWL, RDF, RDFS, XSD, TIME

name_space = "http://stko-kwg.geog.ucsb.edu/"
pfs = {
"rdf": RDF,
"rdfs": RDFS,
"xsd": XSD,
"owl": OWL,
"ex": Namespace("https://example.com/")
}

# Initialization shortcut
def init_kg(prefixes=pfs):
    kg = Graph()
    for prefix in pfs:
        kg.bind(prefix, pfs[prefix])
    return kg
# rdf:type shortcut
a = pfs["rdf"]["type"]

ex = pfs["ex"]

# These are the basic synthetic graphs
skg4 = init_kg()
skg5 = init_kg()
skg6 = init_kg()
# These are the "complex" synthetic graphs
skg5r = init_kg()
skg5rs = init_kg()
skg5rsc = init_kg()

graph_names = ["skg4", "skg5", "skg6", "skg5r", "skg5rs", "skg5rsc"]

# Useful tuples for iterating later
basic_graphs = skg4, skg5, skg6
complex_graphs = skg5r, skg5rs, skg5rsc
graphs = basic_graphs + complex_graphs

# How many "stamps" to instantiate
num_repeats = 1000
# For each "stamp"
for i in range(num_repeats):
  # Mint the central node
  # The center node goes into each SKG
  center_node = ex[f"node{i}"]

  # For SKG-5+
  center_class_node = ex[f"class{0}"]
  t = (center_node, a, center_class_node)
  for g in graphs[1:]:
      g.add(t)

  # For SKG-6
  g.add( (center_class_node, RDFS["subClassOf"], ex[f"superclass0"]))

  # Peripheral (extra) nodes
  # For SKG-4
  for j in range(1,5):
    extra_node = ex[f"node{i}-{j}"]

    # For SKG-4, 5, 6
    for g in basic_graphs + complex_graphs[1:]:
      t = (center_node, ex[f"pred{j}"], extra_node)
      g.add(t)

    for g in complex_graphs:
      # Mint the reification node
      reify_node = ex[f"node{i}-{j}-r"]
      # Specify the type for the r node
      t = (reify_node, a, ex[f"class{j}r"])
      g.add(t)

      # Create and add the first branch of the reification
      reify1 = (center_node, ex[f"pred{j}-r1"], reify_node)
      g.add(reify1)
      # Create and add the second branch of the reification
      reify2 = (reify_node, ex[f"pred{j}-r2"], extra_node)
      g.add(reify2)

      # For SKG-5rsc
      # Mint the context node
      context_node = ex[f"node{i}-{j}-c"]
      skg5rsc.add( (reify_node, ex["context"], context_node) )
      # Specify the type for the context node
      ## All context nodes have the same type -- e.g., "TemporalExtent"
      t = (context_node, a, ex[f"class-c"])
      skg5rsc.add(t)

    # SKG-5+
    class_node = ex[f"class{j}"]
    t = (extra_node, a, class_node)
    for g in basic_graphs[1:]:
      g.add(t)

    # SKG-6
    super_class_node = ex[f"superclass{j}"]
    t = (class_node, RDFS["subClassOf"], super_class_node)
    skg6.add(t)

for g, name in zip(graphs, graph_names):
    output_file = f"/content/drive/My Drive/KGE/SKGsb/output-{name}b.ttl"
    temp = g.serialize(format="nt", encoding="utf-8", destination=output_file)



import rdflib
import os
import random

# Paths
input_dir = "/content/drive/My Drive/KGE/SKGsb/"  # Directory containing TTL files
output_dir = "/content/drive/My Drive/KGE/TSVs/"  # Base directory for output TSV files
os.makedirs(output_dir, exist_ok=True)

# Splitting ratios
train_ratio = 0.8
valid_ratio = 0.1
test_ratio = 0.1

# Ensure the ratios sum to 1
assert train_ratio + valid_ratio + test_ratio == 1.0, "Ratios must sum to 1!"

# Process each TTL file
for ttl_file in os.listdir(input_dir):
    if ttl_file.endswith(".ttl"):
        kg_name = ttl_file.split(".ttl")[0]  # Extract KG name
        input_path = os.path.join(input_dir, ttl_file)

        # Create a subdirectory for each KG
        kg_output_dir = os.path.join(output_dir, kg_name)
        os.makedirs(kg_output_dir, exist_ok=True)

        # Parse TTL file
        g = rdflib.Graph()
        g.parse(input_path, format="ttl")

        # Extract triples
        triples = [(str(s), str(p), str(o)) for s, p, o in g]

        # Shuffle triples
        random.shuffle(triples)

        # Split triples
        n_triples = len(triples)
        n_train = int(n_triples * train_ratio)
        n_valid = int(n_triples * valid_ratio)

        train_triples = triples[:n_train]
        valid_triples = triples[n_train:n_train + n_valid]
        test_triples = triples[n_train + n_valid:]

        # Save to TSV files in the subdirectory
        for split_name, split_triples in zip(
            ["train", "valid", "test"],
            [train_triples, valid_triples, test_triples]
        ):
            output_file = os.path.join(kg_output_dir, f"{split_name}.tsv")
            with open(output_file, "w") as f:
                for head, relation, tail in split_triples:
                    f.write(f"{head}\t{relation}\t{tail}\n")

        print(f"Processed {kg_name}: Train={len(train_triples)}, Valid={len(valid_triples)}, Test={len(test_triples)}")

!pip install pyvis

from rdflib import Graph, Namespace, RDF, RDFS, OWL, XSD

# Namespaces
name_space = "http://stko-kwg.geog.ucsb.edu/"
pfs = {
    "rdf": RDF,
    "rdfs": RDFS,
    "xsd": XSD,
    "owl": OWL,
    "ex": Namespace("https://example.com/")
}

# Initialization shortcut
def init_kg(prefixes=pfs):
    kg = Graph()
    for prefix in pfs:
        kg.bind(prefix, pfs[prefix])
    return kg

# Shortcut for rdf:type
a = pfs["rdf"]["type"]

# Define custom namespace
ex = pfs["ex"]

# Basic synthetic graphs
skg4 = init_kg()
skg5 = init_kg()
skg6 = init_kg()

# Complex synthetic graphs
skg5r = init_kg()
skg5rs = init_kg()
skg5rsc = init_kg()

graph_names = ["skg4", "skg5", "skg6", "skg5r", "skg5rs", "skg5rsc"]

# Useful tuples for iterating later
basic_graphs = skg4, skg5, skg6
complex_graphs = skg5r, skg5rs, skg5rsc
graphs = basic_graphs + complex_graphs

# Populate the graphs before multiplying by 100
for i in range(1):
    # Mint the central node
    center_node = ex[f"node{i}"]

    # For SKG-5+
    center_class_node = ex[f"class{0}"]
    t = (center_node, a, center_class_node)
    for g in graphs[1:]:
        g.add(t)

    # For SKG-6
    g.add((center_class_node, RDFS["subClassOf"], ex[f"superclass0"]))

    # Peripheral (extra) nodes
    for j in range(1, 5):
        extra_node = ex[f"node{i}-{j}"]

        # For SKG-4, 5, 6
        for g in basic_graphs + complex_graphs[1:]:
            t = (center_node, ex[f"pred{j}"], extra_node)
            g.add(t)

        for g in complex_graphs:
            # Mint the reification node
            reify_node = ex[f"node{i}-{j}-r"]
            t = (reify_node, a, ex[f"class{j}r"])
            g.add(t)

            reify1 = (center_node, ex[f"pred{j}-r1"], reify_node)
            g.add(reify1)
            reify2 = (reify_node, ex[f"pred{j}-r2"], extra_node)
            g.add(reify2)

            context_node = ex[f"node{i}-{j}-c"]
            skg5rsc.add((reify_node, ex["context"], context_node))
            t = (context_node, a, ex[f"class-c"])
            skg5rsc.add(t)

        class_node = ex[f"class{j}"]
        t = (extra_node, a, class_node)
        for g in basic_graphs[1:]:
            g.add(t)

        super_class_node = ex[f"superclass{j}"]
        t = (class_node, RDFS["subClassOf"], super_class_node)
        skg6.add(t)

# Visualization Section
import networkx as nx
import matplotlib.pyplot as plt
from pyvis.network import Network

# Convert RDFLib graph to NetworkX graph
def rdflib_to_networkx(graph):
    nx_graph = nx.DiGraph()
    for subj, pred, obj in graph:
        nx_graph.add_edge(str(subj), str(obj), label=str(pred))
    return nx_graph

# Visualize using NetworkX (static visualization)
def visualize_with_networkx(graph, title="Graph Visualization"):
    nx_graph = rdflib_to_networkx(graph)
    pos = nx.spring_layout(nx_graph)
    plt.figure(figsize=(10, 8))
    nx.draw(nx_graph, pos, with_labels=True, node_size=2000, node_color="lightblue", font_size=10)
    nx.draw_networkx_edge_labels(nx_graph, pos, edge_labels=nx.get_edge_attributes(nx_graph, 'label'), font_size=8)
    plt.title(title)
    plt.show()

# Visualize using Pyvis (interactive visualization)
def visualize_with_pyvis(graph, output_file="graph.html"):
    nx_graph = rdflib_to_networkx(graph)
    net = Network(notebook=True, directed=True)
    net.from_nx(nx_graph)
    net.show(output_file)

# Visualize basic graphs
for g, name in zip(basic_graphs, ["skg4", "skg5", "skg6"]):
    print(f"Visualizing {name}...")
    visualize_with_networkx(g, title=name)  # Static visualization
    visualize_with_pyvis(g, output_file=f"{name}.html")  # Interactive visualization

from rdflib import Graph, Namespace, RDF, RDFS, OWL, XSD
from pyvis.network import Network
import networkx as nx
import matplotlib.pyplot as plt

# Namespaces
name_space = "http://stko-kwg.geog.ucsb.edu/"
pfs = {
    "rdf": RDF,
    "rdfs": RDFS,
    "xsd": XSD,
    "owl": OWL,
    "ex": Namespace("https://example.com/")
}

# Initialization shortcut
def init_kg(prefixes=pfs):
    kg = Graph()
    for prefix in pfs:
        kg.bind(prefix, pfs[prefix])
    return kg

# Shortcut for rdf:type
a = pfs["rdf"]["type"]

# Define custom namespace
ex = pfs["ex"]

# Basic synthetic graphs
skg4 = init_kg()
skg5 = init_kg()
skg6 = init_kg()

# Complex synthetic graphs
skg5r = init_kg()
skg5rs = init_kg()
skg5rsc = init_kg()

graph_names = ["skg4", "skg5", "skg6", "skg5r", "skg5rs", "skg5rsc"]

# Useful tuples for iterating later
basic_graphs = skg4, skg5, skg6
complex_graphs = skg5r, skg5rs, skg5rsc
graphs = basic_graphs + complex_graphs

# Populate the graphs before multiplying by 100
for i in range(1):
    # Mint the central node
    center_node = ex[f"node{i}"]

    # For SKG-5+
    center_class_node = ex[f"class{0}"]
    t = (center_node, a, center_class_node)
    for g in graphs[1:]:
        g.add(t)

    # For SKG-6
    g.add((center_class_node, RDFS["subClassOf"], ex[f"superclass0"]))

    # Peripheral (extra) nodes
    for j in range(1, 5):
        extra_node = ex[f"node{i}-{j}"]

        # For SKG-4, 5, 6
        for g in basic_graphs + complex_graphs[1:]:
            t = (center_node, ex[f"pred{j}"], extra_node)
            g.add(t)

        for g in complex_graphs:
            # Mint the reification node
            reify_node = ex[f"node{i}-{j}-r"]
            t = (reify_node, a, ex[f"class{j}r"])
            g.add(t)

            reify1 = (center_node, ex[f"pred{j}-r1"], reify_node)
            g.add(reify1)
            reify2 = (reify_node, ex[f"pred{j}-r2"], extra_node)
            g.add(reify2)

            context_node = ex[f"node{i}-{j}-c"]
            skg5rsc.add((reify_node, ex["context"], context_node))
            t = (context_node, a, ex[f"class-c"])
            skg5rsc.add(t)

        class_node = ex[f"class{j}"]
        t = (extra_node, a, class_node)
        for g in basic_graphs[1:]:
            g.add(t)

        super_class_node = ex[f"superclass{j}"]
        t = (class_node, RDFS["subClassOf"], super_class_node)
        skg6.add(t)

# Convert RDFLib graph to NetworkX graph
def rdflib_to_networkx(graph):
    nx_graph = nx.DiGraph()
    for subj, pred, obj in graph:
        nx_graph.add_edge(str(subj), str(obj), label=str(pred))
    return nx_graph

# Visualize using NetworkX (static visualization)
def visualize_with_networkx(graph, title="Graph Visualization"):
    nx_graph = rdflib_to_networkx(graph)
    pos = nx.spring_layout(nx_graph)
    plt.figure(figsize=(10, 8))
    nx.draw(nx_graph, pos, with_labels=True, node_size=2000, node_color="lightblue", font_size=10)
    nx.draw_networkx_edge_labels(nx_graph, pos, edge_labels=nx.get_edge_attributes(nx_graph, 'label'), font_size=8)
    plt.title(title)
    plt.show()

# Visualize using Pyvis (interactive visualization)
def visualize_with_pyvis(graph, output_file="graph.html"):
    nx_graph = rdflib_to_networkx(graph)
    net = Network(notebook=True, directed=True)
    net.from_nx(nx_graph)
    net.show(output_file)

# Visualize basic graphs
for g, name in zip(basic_graphs, ["skg4", "skg5", "skg6"]):
    print(f"Visualizing {name}...")
    visualize_with_networkx(g, title=name)  # Static visualization
    visualize_with_pyvis(g, output_file=f"{name}.html")  # Interactive visualization

# Visualize complex graphs
for g, name in zip(complex_graphs, ["skg5r", "skg5rs", "skg5rsc"]):
    print(f"Visualizing {name}...")
    visualize_with_networkx(g, title=name)  # Static visualization
    visualize_with_pyvis(g, output_file=f"{name}.html")  # Interactive visualization